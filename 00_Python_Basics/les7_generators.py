# ДЗ. Тема 7. Полезные инструменты. Обработка исключений.
# Решить с помощью генераторов списка.
#
# 1: Даны два списка фруктов. Получить список фруктов, присутствующих в обоих исходных списках.
#     Примечание: Списки фруктов создайте вручную в начале файла.

# вместо фруктов числа для простоты
a = [1, 2, 3, 4]
b = [2, 4, 5, 6, 7]
result = [i for i in a if i in b]
print(f'1) Список 1: {a}')
print(f'   Список 2: {b}')
print(f'   Вывод:    {result}\n')


# 2: Дан список, заполненный произвольными числами.
# Получить список из элементов исходного, удовлетворяющих следующим условиям:
# Элемент кратен 3,
# Элемент положительный,
# Элемент не кратен 4.
#
# Примечание: Список с целыми числами создайте вручную в начале файла.
# Не забудьте включить туда отрицательные числа. 10-20 чисел в списке вполне достаточно.
a = [13, 12, -7, -8, 12, 6, -10, -5, -1, 10, -9, 3, 20, -5, 20, 11, 14, 0, 11, 2]
result = [i for i in a if not i % 3 and i > 0 and i % 4]
print(f'2) Ввод:  {a}')
print(f'   Вывод: {result}\n')


# 3. Напишите функцию которая принимает на вход список.
# Функция создает из этого списка новый список из квадратных корней чисел (если число положительное)
# и самих чисел (если число отрицательное) и возвращает результат (желательно применить генератор
# и тернарный оператор при необходимости). В результате работы функции исходный список не должен измениться.
# Например:
# old_list = [1, -3, 4]
# result = [1, -3, 2]
#
#     Примечание: Список с целыми числами создайте вручную в начале файла.
#     Не забудьте включить туда отрицательные числа. 10-20 чисел в списке вполне достаточно.
a = [13, 12, -7, -8, 12, 6, -10, -5, -1, 10, -9, 3, 20, -5, 20, 11, 14, 0, 11, 2]


def getlist(array):
    res = [i ** 2 if i > 0 else i for i in array]
    return res


print(f'3) Ввод:  {a}')
print(f'   Вывод: {getlist(a)}\n')


# 4. Написать функцию которая принимает на вход число от 1 до 100.
# Если число равно 13, функция поднимает исключительную ситуации ValueError иначе возвращает введенное число,
# возведенное в квадрат.
# Далее написать основной код программы. Пользователь вводит число.
# Введенное число передаем параметром в написанную функцию и печатаем результат, который вернула функция.
# Обработать возможность возникновения исключительной ситуации, которая поднимается внутри функции.
def square(n):
    if n == 13:
        raise ValueError('number = 13!!!')
    return n ** 2


try:
    number = int(input('4) Введите число от 1 до 100: '))
    print(f'   {square(number)}')
except ValueError:
    print('Перехватили ошибку ValueError!')

# Ввод тоже специально поместил в try, чтобы при некорректном вводе, например, при вводе букв,
# ошибка тоже перехватывалась.
